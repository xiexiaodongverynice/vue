<template>
  <section class="cms-body zsjc-oprate" v-loading="loading">
    <!-- 返回组件 -->
    <cms-back></cms-back>
    <!-- 右侧栏 -->
    <div class="right-side">
      <el-tabs v-model="activeName" type="card">
        <el-tab-pane label="知识选择" name="first">
          <div class="t-title">关联知识列表</div>
          <el-table :data="knowledgeData.matchedResult" border style="width: 100%" ref="table">
            <el-table-column type="selection" :reserve-selection="true" width="55"> </el-table-column>
            <el-table-column label="词语" prop="name" align="center"></el-table-column>
          </el-table>
          <div class="t-title">
            <el-form class="search">
              <el-form-item label="备选知识列表：">
                <el-col :span="12">
                  <el-input placeholder="搜索关键词" size="mini" v-model="knowledgeParas.input" prefix-icon="el-icon-search">
                  </el-input>
                </el-col>
              </el-form-item>
            </el-form>
          </div>
          <el-table :data="knowledgeData.likeResultList" border style="width: 100%" ref="table">
            <el-table-column type="selection" :reserve-selection="true" width="55"> </el-table-column>
            <el-table-column label="词语" prop="name" align="center"> </el-table-column>
          </el-table>
        </el-tab-pane>
        <el-tab-pane label="划词结果" name="second">划词结果</el-tab-pane>
        <!-- <el-tab-pane label="适应病症" name="third">适应病症</el-tab-pane>
        <el-tab-pane label="禁忌病症" name="fourth">禁忌病症</el-tab-pane> -->
      </el-tabs>

    </div>
    <div class="main">
      <!-- 标题栏 -->
      <div style="" class="art-title">
        {{dataInfo.fName}}
      </div>
      <div class="art-body">
        <!-- 操作控制面板 -->
        <div class="inner-bord">
          <div class="kz-pannel">
            <el-button-group class="hc-xq">
              <el-button @click="switchHuaci(true)" v-bind:class="{current:isSwitch===true}">划词</el-button>
              <el-button @click="switchHuaci(false)" v-bind:class="{current:isSwitch===false}">详情</el-button>
            </el-button-group>
            <ul class="class-type" v-bind:class="{hide:isSwitch===false}">
              <li v-bind:class="{current:wordToken.currentCName === 'jbmc'}"><a @click="switchHCType('jbmc')"><i class="icon iconfont icon-jibing jbmc"></i>疾病</a></li>
              <li v-bind:class="{current:wordToken.currentCName === 'ypmc_qt'}"><a @click="switchHCType('ypmc_qt')"><i class="icon iconfont icon-jibing ypmc_qt"></i>药品</a></li>
              <li v-bind:class="{current:wordToken.currentCName === 'jymc'}"><a @click="switchHCType('zb')"><i class="icon iconfont icon-jibing jymc"></i>指标</a></li>
            </ul>
          </div>
          <!-- 内容操作区 -->
          <div id="con_nonParticipleArea" v-bind:class="{hide:isSwitch===false}">
            <div class="word_title">【概述】</div>
            <div class="word_content word-token-editer-div" data-type="fGaiShuDis" v-html="dataInfo.fGaiShuDis"></div>
            <div class="word_title">【临床表现】</div>
            <div class="word_content word-token-editer-div" data-type="fLinChuangTeDianDis" v-html="dataInfo.fLinChuangTeDianDis"></div>
            <div class="word_title">【诊断要点】</div>
            <div class="word_content word-token-editer-div" data-type="fZhiLiaoDis" v-html="dataInfo.fZhiLiaoDis"></div>
          </div>
          <!-- 预览 区域-->
          <div id="con_ProviewArea" v-bind:class="{hide:isSwitch}">
            <div class="word_title">【概述】</div>
            <div class="word_content word-token-editer-div" data-type="fGaiShuDis" v-html="dataInfo.fGaiShuDis"></div>
            <div class="word_title">【临床表现】</div>
            <div class="word_content word-token-editer-div" data-type="fLinChuangTeDianDis" v-html="dataInfo.fLinChuangTeDianDis"></div>
            <div class="word_title">【诊断要点】</div>
            <div class="word_content word-token-editer-div" data-type="fZhiLiaoDis" v-html="dataInfo.fZhiLiaoDis"></div>
          </div>
        </div>
      </div>

      <div class="form-footer">
        <el-button type="primary" @click="add(false)">校对完成</el-button>
      </div>
    </div>

  </section>
</template>
<script>
import axios from "axios";
import va from "@/rules";
import formMixns from "@/mixins/form";

export default {
  mixins: [formMixns], //普通表单变量
  data() {
    let required = va.required("此项必填");
    return {
      memberGroup: [], //业务变量会员组
      activeName: "first",
      knowledgeParas: {
        type: "",
        text: "",
        input: ""
      },
      rules: {
        //校验规则
        orgName: [required],
        orgCode: [required],
        orgAppid: [required],
        orgAppsecret: [required]
      },
      wte: null,
      isSwitch: true, //划词状态(true-划词,false-预览)
      temp_currentNode: null, //当前操作节点
      wordToken: {
        currentCName: null,
        currenCoreName: null,
        currenType: null,
        editer: null,
        currentNode: null
      },
      knowledgeData: {}
    };
  },
  methods: {
    replaceNode() {
      let newNode = document.createElement("a");
      console.log(this.temp_currentNode.offsetHeight);
      newNode.innerHTML = this.temp_currentNode.innerHTML;
      newNode.classList = this.temp_currentNode.classList;
      newNode.classList.add("aunderline");
      this.temp_currentNode.parentNode.replaceChild(
        newNode,
        this.temp_currentNode
      );
      $("#con_ProviewArea").html(this.wte.contents());
    },
    /**
     * 保存文章内容
     */
    updateDis() {
      //重写获取表单数据
      let api = this.$api; //API地址
      //this.loading = true;
      let zd = this.temp_currentNode.parentNode.attributes["data-type"]
        .nodeValue; //得到当前操作节点所在字段名
      let disContent = $("#con_ProviewArea")
        .find("[data-type='" + zd + "']")
        .html(); //得到当前段落内容
      let paras = {
        canShu: JSON.stringify({
          pid: this.id,
          ziDuan: zd,
          disContent: disContent
        })
      };
      axios
        .all([axios.post(api.updateDis, paras)])
        .then(axios.spread(data => {}))
        .catch(err => {});
    },

    /**
     * 查询词语
     * type(1-划词查询,2-关键字查询,3-点击词)
     */
    getKnowledgeList(type) {
      //重写获取表单数据
      let api = this.$api; //API地址
      if (type === 1 || type === 3) {
        // 划词
        this.knowledgeParas.input = null;
      }
      if (type === 2) {
        // 关键字搜索
        this.knowledgeParas.text = null;
      }
      this.knowledgeParas.type = this.wordToken.currenType;
      let paras = { canShu: JSON.stringify(this.knowledgeParas) };
      axios
        .all([
          axios.post(api.getKnowledgeList, paras) //axios批量发送请求
        ])
        .then(
          axios.spread(data => {
            this.knowledgeData = data.body; //将用户数据复制给dataInfo
            if (data.body.matchedResult && data.body.matchedResult.length > 0) {
              let obj = { name: data.body.matchedResult };
              this.knowledgeData.matchedResult = [];
              this.knowledgeData.matchedResult.push(obj);
              if (type === 1) {
                this.replaceNode();
              }
            } else {
              this.knowledgeData.matchedResult = [];
            }
          })
        )
        .catch(err => {
          this.loading = false;
        });
    },
    switchHuaci(value) {
      this.isSwitch = value;
    },
    switchHCType(value) {
      switch (value) {
        case "jbmc":
          this.wordToken.currentCName = "jbmc";
          this.wordToken.currenType = "jiBingKnowledgeService";
          break;
        case "ypmc_zn":
          this.wordToken.currentCName = "ypmc_zn";
          this.wordToken.currenType = "yaoPinKnowledgeService";
          break;
        case "ypmc_qt":
          this.wordToken.currentCName = "ypmc_qt";
          this.wordToken.currenType = "yaoPinKnowledgeService";
          break;
        case "jymc":
          this.wordToken.currentCName = "jymc";
          this.wordToken.currenType = "zhiBiaoKnowledgeService";
          break;
      }
    },

    iniWte() {
      var self = this;
      var con_ProviewArea = document.getElementById("con_ProviewArea");
      var con_nonParticipleArea = document.getElementById(
        "con_nonParticipleArea"
      );

      var text = $(con_nonParticipleArea)
        .find(".word_title:first")
        .parent()
        .html();

      self.wte = $.wordTokenEditer({
        editable: true,
        dom: $(con_nonParticipleArea),
        block: "word_content",
        disableColor: "#aaa",
        text: text,
        callback: function(obj) {
          var action = obj.action;
          var types = obj.types;
          var text = obj.text;

          if (action == "click" && self.isSwitch) {
            /*
			var cname = window.wordToken.currentCName;
			if(cname && cname == "wordTokenClean"){
				self.wte.cleanNode(obj.node);
				deleteWord(text,types);
				$(con_ProviewArea.getDom()).html(self.wte.contents());
			}
			*/
            if ($(obj.node).attr("id")) {
              window.domId = $(obj.node).attr("id");
            }

            if ($(obj.node).hasClass("word_error")) {
              var ds = view.get("#ds_verifyDetail").getData();
              ds.each(function(data) {
                if ($(obj.node).attr("id") == data.get("domId")) {
                  view
                    .get("#ds_verifyDetail")
                    .getData()
                    .setCurrent(data);
                  return;
                }
              });

              if ($(obj.node).hasClass("word_temp")) {
                view.set("#btn_process.visible", true);
              } else {
                view.set("#btn_process.visible", false);
              }

              view.get("#dialog_error").show();
            }

            for (var i = 0; i < types.length; i++) {
              if (types[i] !== "aunderline") {
                self.switchHCType(types[i]);
              }
            }

            // view.set("#hc_ybqk.visible", false);

            if (self.temp_currentNode == obj.node) {
              return;
            }

            self.temp_currentNode = obj.node;
            self.knowledgeParas.text = text;
            self.getKnowledgeList(3);
          } else if (action == "dbclick" && self.isSwitch) {
            if ($(obj.node).hasClass("word_temp")) {
              return;
            }
            self.temp_currentNode = null;

            //var ds = view.get("#ds_splitWord").getData();
            //ds.clear();
            //view.set("#txt_normal.text", "");
            //deleteWord(text, types);
            self.wte.cleanNode(obj.node);
            $(con_ProviewArea).html(self.wte.contents());
          } else if (action == "select") {
            //view.set("#hc_ybqk.visible", false);
            //view.set("#hc_normal.visible", true);

            if (self.wordToken.currentCName) {
              if (text.length == 1) {
                alert("所选的词长度必须大于1!");
                self.wte.cleanNode(obj.node);
                return;
              }
              var cNmae = self.wordToken.currentCName;
              window.click_currentCname = self.wordToken.currentCName;
              var isTrue = true;
              //isTrue = isValidWord(text);
              if (!isTrue) {
                alert("您所选的词包含不合法字符,请重新选择!");
                self.wte.cleanNode(obj.node);
              } else {
                var aryName = [];
                aryName.push(self.wordToken.currentCName);
                // if (self.wordToken.currenCoreName != "") {
                //   aryName.push(self.wordToken.currenCoreName);
                // }
                //划词自动保存上一个划词所分的词
                // var ds = view.get("#ds_splitWord").getData();
                // if (ds) {
                //   view.get("#btn_saveSplitWord").fireEvent("onClick");
                // }

                // addWord(text, aryName);

                self.wte.tokenNode(obj.node, aryName);
                self.temp_currentNode = obj.node;
                console.log(self.temp_currentNode.offsetHeight);
                
                self.knowledgeParas.text = text;
                self.getKnowledgeList(1);
                $(con_ProviewArea).html(self.wte.contents());
                self.updateDis(); //保存
              }
              //划词时划所有相同名词
              //this.tokenNodeByText(text,[window.wordToken.currentCName]);
            } else {
              alert("请选择一种划类型!");
              self.wte.cleanNode(obj.node);
            }
          }
        }
      });
    },
    getDataInfo(id) {
      //重写获取表单数据
      let api = this.$api; //API地址
      let paras = { canShu: JSON.stringify({ pid: id }) };
      axios
        .all([
          axios.post(api.jibingDetail, paras) //axios批量发送请求
        ])
        .then(
          axios.spread(data => {
            this.dataInfo = data.body; //将用户数据复制给dataInfo
            this.loading = false;
          })
        )
        .catch(err => {
          this.loading = false;
        });
    },

    add(state) {
      //自定义一下处理方法
      let paras = { canShu: JSON.stringify(this.dataInfo) };
      this.saveDataInfo(state, this.$api.orgEdit, paras, "list");
    },
    update() {}
  },
  created() {
    //初始获取数据
    this.getDataInfo(this.id);
  },
  updated() {
    //初始获取数据
    this.iniWte();
  }
};
</script>

<style>
.zsjc-oprate {
  color: #333;
}
.right-side {
  float: right;
  width: 30%;
  padding: 10px 20px;
}
.main {
  margin-right: 30%;
  border: 1px solid #e6ebf5;
  border-width: 0 1px 0 0;
}
/*标题*/
.art-title {
  font-size: 24px;
  text-align: center;
  padding: 15px 0;
  border-bottom: 2px solid #e6ebf5;
}
.art-body {
  padding: 20px;
}
.art-body .inner-bord {
  border: 1px solid #e6ebf5;
}
/* 控制条*/
.kz-pannel {
  background-color: #f5f6f5;
  padding: 10px 20px;
}
/*划词/预览切换样式*/
.kz-pannel .hc-xq .current {
  color: #fff;
  background: #409eff;
}

/*划词类型按钮*/
.kz-pannel ul.class-type {
  display: inline-block;
  vertical-align: middle;
  margin-left: 50px;
}
.kz-pannel ul.class-type li {
  display: table-cell;

  font-size: 14px;
  height: 32px;
  vertical-align: middle;
  padding: 0 20px;
}
.kz-pannel ul.class-type li.current {
  border: 1px solid #e6ebf5;
  background: #fff;
}
.kz-pannel ul.class-type li i {
  font-size: 16px;
}
.main .form-footer {
  padding: 15px 0;
  text-align: center;
}
.right-side {
  z-index: 99;
}
.right-side .t-title {
  font-size: 16px;
  margin: 20px 0 10px 0;
}
</style>
